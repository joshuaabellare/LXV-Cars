<?php

/**
 * Check if mobile
 */
function isMobile() {
    return preg_match("/(android|avantgo|blackberry|bolt|boost|cricket|docomo|fone|hiptop|mini|mobi|palm|phone|pie|tablet|up\.browser|up\.link|webos|wos)/i", $_SERVER["HTTP_USER_AGENT"]);
}

function custom_module_element_info_alter(array &$types) {
  if (isset($types['password_confirm'])) {
    $types['password_confirm']['#process'][] = '_custom_module_change_title';
  }
}

function _custom_module_change_title(&$element) {
  $element['pass1']['#title'] = t('Enter New Password');
  $element['pass2']['#title'] = t('Confirm New Password');
  return $element;
}

/**                                                                           
 * Implements hook_form_alter().                                              
 */                                                                          
function custom_module_form_alter(&$form, &$form_state, $form_id) {
	/*if ($form_id == 'event_package_node_form'){
		$form['field_type_of_event']['und']['#options'] = array (
			'Social Events' => array(
			  1 => 'Bachelorette Parties',
		      2 => 'Reunions',
		      3 => 'Romantic Getaway',
		      4 => 'Sweet Sixteen',
		      5 => 'Birthdays',
		      6 => 'Debuts',
		      7 => 'Yacht Events',
		    ),
		    'Corporate Events' => array(
		      8 => 'Corporate Yacht Events',
		      9 => 'Christmas Parties',
		      10 => 'Corporate Parties',
		    ),
		    'Weddings' => array(
			  11 => 'Wedding Anniversaries',
		      12 => 'Prenup Photo shoot',
		      13 => 'Proposals',
		      14 => 'Wedding Celebrations',
		    ),
		);
	}
	*/
	switch ($form_id) {
    	case 'user_login':
    	 	if(arg(0) == 'user') {
	    	 	$form['name']['#title'] = array('Email address');
     		}
    	break;
    	/* case 'user_register_form':
    		$form['account']['name']['#title'] = array('Fullname');
    	break; */
    	case 'user_profile_form':
    		$form['account']['name']['#description'] = 'Your Fullname.';
    		$form['account']['mail']['#description'] = 'Your Email Address.';
    		$form['account']['current_pass']['#description'] = 'Enter your current password to change the E-mail address or Password. Request new password.';
    	break;

    	case 'country_brand_node_form':
    		$node = $form_state['node'];
	    	/*
				Check if node is new | if it's node/add
	    	*/
	    	if (!isset($node->nid) || isset($node->is_new)) {
			    if(empty($form['title']['#value'])){
	    		 	$form['title']['#value'] = 'Brand Title Connected';
	    		}
			}
			/*
				It is a node edit
	    	*/
			else {
			    $form['field_country']['#disabled'] = 'disabled';
			}
		break;
    		
	}
	
	if ($form_id == 'views_exposed_form'){
		$view = $form_state['view'];
		if ($view){
			//Setting placeholder
			$form['title']['#attributes'] = array('placeholder'=> array(t('Search')));
			$form['field_max_capacity_value']['#attributes'] = array('placeholder'=> array(t('Number of Guest(s)')));
			$form['field_seating_capacity_value']['#attributes'] = array('placeholder'=> array(t('Number of Seating Guest(s)')));
			$form['field_sleepover_capacity_value']['#attributes'] = array('placeholder'=> array(t('Charter Capacity')));
			$form['field_bedroom_value']['#attributes'] = array('placeholder'=> array(t('Number of Bedroom(s)')));
			$form['field_land_area_value']['#attributes'] = array('placeholder'=> array(t('Land Area (sqm.)')));
			$form['field_geofield_distance']['#origin_options']['#attributes'] = array('placeholder'=> array(t('Search for location')), 'size'=> array(30));
			//Cleaning the filter labels
			unset($form['#info']['field_max_capacity_value']['label']);
			//$form['field_service_feature_value']['#attributes']['data-placeholder'] = 'This is used as a placeholder instead.';
			$form['type']['#attributes']['data-placeholder'] = 'Type of Venue';

			if ($view->name == 'rental' && $view->current_display == 'all_yachts') {
				$form['field_max_capacity_value']['#attributes'] = array('placeholder'=> array(t('Event Capacity')));
				
			}
		}

		if ($view->name == 'search' && $view->current_display == 'search_page') {
			$form['title']['#attributes'] = array('placeholder'=> array(t('Search LXV')));
			$form['combine']['#attributes'] = array('placeholder'=> array(t('Enter Destination')));
		}

		if ($view->name == 'rental' && $view->current_display == 'yacht_country') {
			$form['field_max_capacity_value']['#attributes'] = array('placeholder'=> array(t('Day Tour Capacity')));
		}		
	}
}

/**
 * Implements hook_theme(). FOR INLINE ENTITY FORMS
 */
function custom_module_theme($existing, $type, $theme, $path) {
	return array(
		'block_admin_configure' => array(
		  'arguments' => array(
			  'form' => NULL,
		  ),
		  'template' => 'block-admin-configure',
		  'path' => drupal_get_path('theme', 'rhythm') . '/rhythm_sub/templates/block',
		  'render element' => 'form',
		),
		'hybridauth_additional_info_form' => array(
		  'arguments' => array(
			  'form' => NULL,
		  ),
		  'template' => 'hybridauth-additional-info-form',
		  'path' => drupal_get_path('theme', 'rhythm') . '/rhythm_sub/templates/user',
		  'render element' => 'form',
		),
		'change_pwd_page_form' => array(
		  'arguments' => array(
			  'form' => NULL,
		  ),
		  'template' => 'change-pwd-page-form',
		  'path' => drupal_get_path('theme', 'rhythm') . '/rhythm_sub/templates/user',
		  'render element' => 'form',
		)
	);
}

/**
 * Implements hook_element_info_alter()
 * Add additional (!) custom process function
 
function custom_module_element_info_alter(&$type) {
	if (isset($type['geofield_proximity']['#process'])) {
		$type['geofield_proximity']['#process'][] = 'custom_module_proximity_element_process';
	}
}*/

/*
 * Alter geofield views exposed form, remove distance and unit

function custom_module_proximity_element_process($element, &$form_state, $form) {
	$element['distance']['#access'] = FALSE;
	$element['unit']['#access'] = FALSE;
	unset($element['origin']['#prefix']);
	return $element;
}
*/

/**
 * @file
 * A plugin for transforming data in rules.
 */

/**
 * Implements hook_rules_action_info().
 */
function custom_module_rules_action_info() {
  $return = array(
    'pathtonid' => array(
      'label' => t('Convert path to nid'),
      'parameter' => array(
        'input_text' => array(
          'type' => 'text',
          'label' => t('Input text'),
        ),
      ),
      'provides' => array(
        'pathtonid' => array(
          'type' => 'integer',
          'label' => t('Node ID'),
        ),
      ),
      'group' => t('Data Transforms'),
      'base' => 'custom_module_action_pathtonid',
    ),
  );
  return $return;
}

/**
 * Action: Add variable.
 * Gets nid from path alias.
 */
function custom_module_action_pathtonid($input_text) {
  $path = drupal_get_normal_path($input_text);
  $parts = explode('/', $path);
  // nodes will always have 2 parts in url
  if (count($parts) == 2){
    if($parts[0] == 'node' && is_numeric($parts[1])){
      $input_text = $parts[1];
    }
  }
  return array('pathtonid' => $input_text);
}

/**
 * Implements hook_menu_link_alter().
 
function custom_module_menu_link_alter(&$link) {
  if ($link['link_title'] == 'My Dealer Page') {
    $link['options']['alter'] = TRUE;
  }
  if ($link['link_title'] == 'Edit My Dealer Page') {
    $link['options']['alter'] = TRUE;
  }
}

function custom_module_translated_menu_link_alter(&$link) {
	global $user;
	global $base_url; 
	$prof_dealer = array_intersect(array('professional dealer', 'gold dealer', 'diamond dealer'), array_values($user->roles));
	if(!empty($prof_dealer) ? TRUE : FALSE) {
		$dealer_query = new EntityFieldQuery;
		$result = $dealer_query->entityCondition('entity_type', 'node')
								->entityCondition('bundle', 'professional_dealer')
								->propertyCondition('uid', $user->uid)
								->propertyCondition('status', 1)
								->range(0, 1)
								->execute();
		if (!empty($result ['node'])) {
			$nid = reset($result['node'])->nid;
			$dealer_alias = drupal_get_path_alias('node/' . $nid);
		}
		if ($link['link_title'] == 'My Dealer Page') {
		    $link['href'] = $dealer_alias;
		}
		if ($link['link_title'] == 'Edit My Dealer Page') {
		    $link['href'] = 'node/' . $nid . '/edit';
		}
	}

}
*/
?>
